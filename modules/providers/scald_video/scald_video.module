<?php

/**
 * @file
 * Scald Video is a Scald Atom Provider for video files.
 *
 * @Issue(
 *   "Test plupload integration"
 *   type="bug"
 *   priority="normal"
 * )
 */

/*******************************************************************************
 * SCALD HOOK IMPLEMENTATIONS
 */

/**
 * Implements hook_scald_atom_providers().
 */
function scald_video_scald_atom_providers() {
  return array(
    'video' => 'Upload Video file'
  );
}

/**
 * Implements hook_scald_add_form().
 */
function scald_video_scald_add_form(&$form, &$form_state) {
  scald_video_get_video_file_form($form['file']);
  $form['file']['#title'] = 'Video';
}

/**
 * Implements hook_scald_add_atom_count().
 */
function scald_video_scald_add_atom_count(&$form, &$form_state) {
  if (is_array($form_state['values']['file'])) {
    return max(count($form_state['values']['file']), 1);
  }
  return 1;
}

/**
 * Implements hook_scald_add_form_fill().
 */
function scald_video_scald_add_form_fill(&$atoms, $form, $form_state) {
  $dir_video_thumb = ScaldAtomController::getThumbnailPath('video');

  foreach ($atoms as $delta => $atom) {

    // Delta is used only with multifile field:
    if (is_array($form_state['values']['file'])) {
      // plupload infos:
      $file_infos = $form_state['values']['file'][$delta];
    }
    else {
      // This will be a fid:
      $file_infos = $form_state['values']['file'];
    }
    $file = scald_video_get_video_file($file_infos, $form['file']['#upload_location']);

    $atom->base_id = $file->fid;
    $atom->title = $file->filename;
    $atom->scald_video[LANGUAGE_NONE][0] = (array) $file;

    // @TODO : find lib to get metadatas from video files
  }
}

/**
 * Implements hook_scald_fetch().
 */
function scald_video_scald_fetch($atom, $type) {
  $file_items = field_get_items('scald_atom', $atom, 'scald_thumbnail');
  if (!empty($file_items)) {
    $file_item = current($file_items);
    if (file_exists($file_item['uri'])) {
      $atom->thumbnail_source = $file_item['uri'];
    }
  }
  $file = file_load($atom->base_id);
  $atom->base_entity = $file;
  $atom->file_source = $file->uri;
}

/**
 * Synchronisation of scald_video field with base_id.
 *
 * The scald_video field is also the base entity. We keep them in
 * synchronisation when user updates that field.
 *
 * @param object $atom
 *   Atom.
 */
function _scald_video_sync_file($atom) {
  if ($atom->scald_video) {
    $atom->base_id = $atom->scald_video[LANGUAGE_NONE][0]['fid'];
  }
}

/**
 * Implements hook_scald_update_atom().
 */
function scald_video_scald_update_atom($atom, $mode) {
  if ($mode == 'atom') {
    _scald_video_sync_file($atom);
  }
}

/**
 * Implements hook_scald_register_atom().
 */
function scald_video_scald_register_atom($atom, $mode) {
  if ($mode == 'atom') {
    _scald_video_sync_file($atom);
  }
}

/**
 * Implements hook_scald_prerender().
 */
function scald_video_scald_prerender($atom, $context, $options, $mode) {
  $video_sources = array();
  $field_items = field_get_items('scald_atom', $atom, 'scald_video');
  foreach ($field_items as $video_file) {
    $video_sources[] = array(
      'path'      => file_create_url($video_file['uri']),
      'mime_type' => $video_file['filemime'],
    );
  }

  if ($mode == 'atom') {
    $atom->rendered->player = theme('scald_video_player',
      array('vars' =>
        array(
          'atom'          => $atom,
          'video_sources' => $video_sources,
          'video_width'   => check_plain($atom->data['video_width']),
          'video_height'  => check_plain($atom->data['video_height']),
          'thumbnail'     => $atom->thumbnail_source,
          'class'         => 'scald_video',
          'context'       => $context,
        ),
      )
    );
  }
}

/**
 * Implements hook_theme().
 */
function scald_video_theme() {
  return array(
    'scald_video_player' => array(
      'variables' => array('vars' => NULL),
      'template' => 'scald_video_player'
    )
  );
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 */
function scald_video_file_mimetype_mapping_alter(&$mapping) {
  if (!in_array('video/webm', $mapping['mimetypes'])) {
    $mapping['mimetypes'][] = 'video/webm';
    $mapping['extensions']['webm'] = count($mapping['mimetypes']) - 1;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function scald_video_form_scald_atom_add_form_options_alter(&$form, &$form_state) {

  // We check for multiple atoms on the form:
  if (isset($form_state['scald']['atom'])) {
    $atoms = array($form_state['scald']['atom']);
  }
  else {
    $atoms = $form_state['scald']['atoms'];
  }

  // Set one atom's form options. This can be called multiple times in case
  // a multifile field is used.
  foreach ($atoms as $key => $atom) {

    $form["atom$key"]['#tree'] = TRUE;

    // The 'scald_video' file field is not used by other video providers such as
    // DailyMotion, Vimeo and YouTube. Hide it, and proceed to the next atom.
    if ($atom->provider !== 'scald_video') {
      $form["atom$key"]['scald_video']['#access'] = FALSE;
      break;
    }

    $width = '';
    $height = '';
    if (isset($atom->sid)) {
      if (isset($atom->data['video_width'])) {
        $width = $atom->data['video_width'];
      }
      if (isset($atom->data['video_height'])) {
        $height = $atom->data['video_height'];
      }
    }
    else {
      // Retrieve informations of Video by ffmpeg
      // http://ffmpeg-php.sourceforge.net/doc/api/ffmpeg_movie.php
      if (class_exists('ffmpeg_movie')) {
        $ffmpeg_video = new ffmpeg_movie(drupal_realpath($atom->file_source), FALSE);
        $ffmpeg_width = (int) $ffmpeg_video->getFrameWidth();
        if ($ffmpeg_width > 0) {
          $width = check_plain($ffmpeg_width);
        }
        $ffmpeg_height = (int) $ffmpeg_video->getFrameHeight();
        if ($ffmpeg_height > 0) {
          $height = check_plain($ffmpeg_height);
        }
        /* Does not work : page reset, but no error... (php and ffmpeg 5.4 from Linux Mint)
        $title = $ffmpeg_video->getTitle();
        if ($title != '') {
          $form['title']['#default_value'] = check_plain($title);
        }*/
      }
    }
    $form["atom$key"]['width'] = array(
      '#type' => 'textfield',
      '#title' => t('Width'),
      '#size' => 10,
      '#element_validate' => array('element_validate_integer_positive'),
      '#required' => TRUE,
      '#default_value' => $width,
    );
    $form["atom$key"]['height'] = array(
      '#type' => 'textfield',
      '#title' => t('Height'),
      '#size' => 10,
      '#element_validate' => array('element_validate_integer_positive'),
      '#required' => TRUE,
      '#default_value' => $height,
    );
  }

  $form['#submit'][] = 'scald_video_form_scald_atom_add_form_options_submit';
}

/**
 * Atom's form save and edit submit callback.
 */
function scald_video_form_scald_atom_add_form_options_submit($form, &$form_state) {

  // We check for multiple atoms on the form:
  if (isset($form_state['scald']['atom'])) {
    $atoms = array($form_state['scald']['atom']);
  }
  else {
    $atoms = $form_state['scald']['atoms'];
  }

  foreach ($atoms as $key => $atom) {

    if ($atom->provider !== 'scald_video') {
      break;
    }

    $atom->data['video_width'] = $form_state['values']["atom$key"]['width'];
    $atom->data['video_height'] = $form_state['values']["atom$key"]['height'];

    scald_atom_save($atom);
  }
}

/**
 * Returns a video file form element compatible with plupload.
 * This function avoid repetitions over the multiple places
 * a file upload field is needed in scald_video.
 *
 * @param $form_element
 *   The form element we want to set to video file field.
 *
 */
function scald_video_get_video_file_form(&$form_element) {
  $type = scald_type_load('video');

  $field = field_info_field('scald_video');
  $instance = field_info_instance('scald_atom', 'scald_video', 'video');
  $validators = array(
    'file_validate_extensions' => array(0 => 'webm mp4 ogv'),
  );
  $location = 'public://atoms/video/';
  if ($field && $instance) {
    $validators = file_field_widget_upload_validators($field, $instance);
    $directory = file_field_widget_uri($field, $instance);
    if (file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
      $location = $directory . '/';
    }
  }

  $form_element = array(
    '#title' => check_plain(scald_type_property_translate($type)),
    '#upload_location' => $location,
    '#upload_validators' => $validators,
  );

  if (module_exists('plupload')) {
    $form_element['#type'] = 'plupload';
    $form_element['#plupload_settings'] = array(
      'runtimes' => 'html5', 'chunk_size' => '1mb',
    );
  }
  else {
    $defaults = scald_atom_defaults('video');
    $form_element['#type'] = $defaults->upload_type;
  }
}

/**
 * Saves a video file from a form's file value.
 */
function scald_video_get_video_file($file_form_value, $location = NULL) {
  if (is_null($location)) {
    $location = variable_get('scald_video_upload_location', 'public://atoms/video/');
  }
  if (is_array($file_form_value) && module_exists('plupload')) {
    module_load_include('inc', 'scald', 'includes/scald.plupload');
    $file = scald_plupload_save_file($file_form_value['tmppath'], $location . $file_form_value['name']);
  }
  else {
    $file = file_load($file_form_value);
  }
  return $file;
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 *
 * This is a patch for using CKEditor 4.x with the WYSIWYG module.
 * Without this patch, all works fine except the video preview in the WYSIWYG editor.
 * This patch allow <video> and <source> tags.
 */
function scald_video_wysiwyg_editor_settings_alter(&$settings, $context) {
  if ($context['profile']->editor == 'ckeditor') {
    $settings['extraAllowedContent'] = array(
      'video[controls,height,width,id,preload]', 'source[src,type]'
    );
  }
}
